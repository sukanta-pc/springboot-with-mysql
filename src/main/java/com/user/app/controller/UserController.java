package com.user.app.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.user.app.entity.User;
import com.user.app.model.UserVO;
import com.user.app.repository.UserRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/users") // This means URL's start with /users (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@RequestMapping(method=RequestMethod.GET) 
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@RequestMapping(path="/{id}", method=RequestMethod.GET) 
	public @ResponseBody User getUser(@PathVariable long id) {
		// This returns a JSON or XML with the users
		
		return userRepository.findOne(id);
	}
	
	@RequestMapping(method=RequestMethod.PUT) 
	public @ResponseBody String addNewUser (@RequestBody UserVO userVo) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setName(userVo.getName());
		n.setEmail(userVo.getEmail());
		n.setProfession(userVo.getProfession());
		userRepository.save(n);
		return "Saved";
	}
	
	@RequestMapping(method=RequestMethod.POST) 
	public @ResponseBody String updateUser (@RequestBody UserVO userVo) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setId(userVo.getId());
		n.setName(userVo.getName());
		n.setEmail(userVo.getEmail());
		n.setProfession(userVo.getProfession());
		userRepository.save(n);
		return "Updated";
	}
	
	@RequestMapping(path="/{id}", method=RequestMethod.DELETE) 
	public @ResponseBody String deleteUser (@PathVariable Long id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setId(id);
		userRepository.delete(n);
		return "Deleted";
	}
}
